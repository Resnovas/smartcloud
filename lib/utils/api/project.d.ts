import type { Utils } from '../index.js';
export declare const column: {
    list(this: Utils, project_id: number): Promise<{
        url: string;
        project_url: string;
        cards_url: string;
        id: number;
        node_id: string;
        name: string;
        created_at: string;
        updated_at: string;
    }[]>;
    get(this: Utils, column_id: number): Promise<{
        url: string;
        project_url: string;
        cards_url: string;
        id: number;
        node_id: string;
        name: string;
        created_at: string;
        updated_at: string;
    }>;
    listCards(this: Utils, column_id: number): Promise<{
        url: string;
        id: number;
        node_id: string;
        note: string | null;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        archived?: boolean | undefined;
        column_name?: string | undefined;
        project_id?: string | undefined;
        column_url: string;
        content_url?: string | undefined;
        project_url: string;
    }[]>;
};
export declare const card: {
    get(this: Utils, card_id: number): Promise<{
        url: string;
        id: number;
        node_id: string;
        note: string | null;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        archived?: boolean | undefined;
        column_name?: string | undefined;
        project_id?: string | undefined;
        column_url: string;
        content_url?: string | undefined;
        project_url: string;
    }>;
    create(this: Utils, content_id: number, column_id: number, content_type?: 'Issue' | 'PullRequest'): Promise<{
        url: string;
        id: number;
        node_id: string;
        note: string | null;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        archived?: boolean | undefined;
        column_name?: string | undefined;
        project_id?: string | undefined;
        column_url: string;
        content_url?: string | undefined;
        project_url: string;
    }>;
    move(this: Utils, card_id: number, column_id: number): Promise<import("@octokit/types").OctokitResponse<{
        [key: string]: unknown;
    }, 201>>;
};
export declare const projects: {
    get(this: Utils, project_id: number): Promise<{
        owner_url: string;
        url: string;
        html_url: string;
        columns_url: string;
        id: number;
        node_id: string;
        name: string;
        body: string | null;
        number: number;
        state: string;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        organization_permission?: "read" | "write" | "admin" | "none" | undefined;
        private?: boolean | undefined;
    }>;
    org(this: Utils, org: string): Promise<{
        owner_url: string;
        url: string;
        html_url: string;
        columns_url: string;
        id: number;
        node_id: string;
        name: string;
        body: string | null;
        number: number;
        state: string;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        organization_permission?: "read" | "write" | "admin" | "none" | undefined;
        private?: boolean | undefined;
    }[]>;
    user(this: Utils, username: string): Promise<{
        owner_url: string;
        url: string;
        html_url: string;
        columns_url: string;
        id: number;
        node_id: string;
        name: string;
        body: string | null;
        number: number;
        state: string;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        organization_permission?: "read" | "write" | "admin" | "none" | undefined;
        private?: boolean | undefined;
    }[]>;
    repo(this: Utils, owner: string, repository: string): Promise<{
        owner_url: string;
        url: string;
        html_url: string;
        columns_url: string;
        id: number;
        node_id: string;
        name: string;
        body: string | null;
        number: number;
        state: string;
        creator: {
            name?: string | null | undefined;
            email?: string | null | undefined;
            login: string;
            id: number;
            node_id: string;
            avatar_url: string;
            gravatar_id: string | null;
            url: string;
            html_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            subscriptions_url: string;
            organizations_url: string;
            repos_url: string;
            events_url: string;
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string | undefined;
        } | null;
        created_at: string;
        updated_at: string;
        organization_permission?: "read" | "write" | "admin" | "none" | undefined;
        private?: boolean | undefined;
    }[]>;
};
