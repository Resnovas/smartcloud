# name: Release Management

# on:
#   push:
#     branches:
#       - master
#       - dev
#   pull_request:
#     types:
#       - closed

# jobs:
#   createBranch:
#     name: create branch for automation
#     runs-on: ubuntu-latest
#     timeout-minutes: 5
#     if: github.event_name != 'gollum' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
#     steps:
#       - name: Get Configurations
#         uses: Videndum/manage-github-secrets@1.0.0-beta
#         with:
#           settings: ${{ secrets.SETTINGS }}
#           mode: 'environment'
#           token: ${{ secrets.GITHUB_TOKEN }}
#       - uses: peterjgrainger/action-create-branch@2.0.1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           branch: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release

#   # Using the config in ../release-drafter.yml creates release drafts automatically
#   update_release_draft:
#     name: Create release Draft
#     runs-on: ubuntu-latest
#     needs: createBranch
#     if: github.event_name != 'gollum' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
#     steps:
#       - name: Get Configurations
#         uses: Videndum/manage-github-secrets@1.0.0-beta
#         with:
#           settings: ${{ secrets.SETTINGS }}
#           mode: 'environment'
#           token: ${{ secrets.GITHUB_TOKEN }}
#       - name: Import GPG key
#         if: ${{env.changelog_enabled}} == true && ${{env.gpg_enabled}} == true
#         id: import_gpg
#         uses: crazy-max/ghaction-import-gpg@v2
#         env:
#           GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#           PASSPHRASE: ${{ secrets.PASSPHRASE }}
#           git_user_signingkey: ${{env.gpg_signingKey}}
#           git_commit_gpgsign: ${{env.gpg_commitSign}}
#           git_tag_gpgsign: ${{env.gpg_tagSign}}
#           git_push_gpgsign: ${{env.gpg_pushSign}}
#       - uses: peterjgrainger/action-create-branch@2.0.1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           branch: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release
#       - run: |
#           if [ "${{contains(github.event.pull_request.labels.*.name, env.release_major)}}" = "true" ] || [ "${{contains(github.event.pull_request.labels.*.name, env.release_minor)}}" = "true" ] || [ "${{contains(github.event.pull_request.labels.*.name, env.release_patch)}}" = "true" ];
#           then echo ::set-env name=publish::true ;
#           else echo ::set-env name=publish::false ;
#           fi ;
#       - uses: release-drafter/release-drafter@v5
#         id: release
#         if: ${{env.release_enabled}} == true
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           publish: ${{env.publish}}
#       - run: |
#           if [ "${{env.gpg_Enable}}" = "false" ];
#           then echo ::set-env name=commitName::"Changelog User" ; echo ::set-env name=commitEmail::"" ;
#           else echo ::set-env name=commitName::"${{ steps.import_gpg.outputs.name }}" ; echo ::set-env name=commitEmail::"${{ steps.import_gpg.outputs.email }}" ;
#           fi ;

#           if [ "${{steps.release.outputs.tag_name}}" != "" ];
#           then echo "${{steps.release.outputs.tag_name}}" > .github/workflow-version.txt ; echo ::set-env name=versioning::true ;
#           fi;
#       - name: Commit files
#         id: commit
#         uses: stefanzweifel/git-auto-commit-action@v4
#         with:
#           commit_message: 'chore: set version file'
#           branch: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release
#           commit_user_name: ${{env.commitName}}
#           commit_user_email: ${{env.commitEmail}}
#           commit_author: '${{env.commitName}} <${{env.commitEmail}}>'
#           commit_options: ${{env.auto_commitOptions}}
#           push_options: ${{env.auto_pushOptions}}

#   # creates a changelog, commits, pushes, and creates a pull request
#   create-changelog:
#     name: Copy files for wiki & docs
#     runs-on: ubuntu-18.04
#     if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
#     needs:
#       - createBranch
#       - update_release_draft
#     steps:
#       - name: Get Configurations
#         uses: Videndum/manage-github-secrets@1.0.0-beta
#         with:
#           settings: ${{ secrets.SETTINGS }}
#           mode: 'environment'
#           token: ${{ secrets.GITHUB_TOKEN }}
#       - name: Import GPG key
#         if: ${{env.changelog_enabled}} == true && ${{env.gpg_enabled}} == true
#         id: import_gpg
#         uses: crazy-max/ghaction-import-gpg@v2
#         env:
#           GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#           PASSPHRASE: ${{ secrets.PASSPHRASE }}
#           git_user_signingkey: ${{env.gpg_signingKey}}
#           git_commit_gpgsign: ${{env.gpg_commitSign}}
#           git_tag_gpgsign: ${{env.gpg_tagSign}}
#           git_push_gpgsign: ${{env.gpg_pushSign}}
#       - name: 'Check-out'
#         if: ${{env.changelog_enabled}} == true
#         uses: actions/checkout@v2
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           ref: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release
#           fetch-depth: 0
#       - uses: heinrichreimer/github-changelog-generator-action@v2.1.1
#         if: ${{env.changelog_enabled}} == true
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           output: ${{ env.changelog_config }}
#           pullRequests: ${{env.changelog_pullRequests}}
#           prWoLabels: '${{env.changelog_prWoLabels}}'
#           excludeLabels: '${{env.changelog_excludeLabels}}'
#           breakingLabels: '${{env.changelog_breakingLabels}}'
#           enhancementLabels: '${{env.changelog_enhancementLabels}}'
#           bugLabels: '${{env.changelog_bugLabels}}'
#           deprecatedLabels: '${{env.changelog_deprecatedLabels}}'
#           removedLabels: '${{env.changelog_removedLabels}}'
#           securityLabels: '${{env.changelog_securityLabels}}'
#           stripGeneratorNotice: ${{env.changelog_stripGeneratorNotice}}
#       - name: manage files
#         if: ${{env.copy_enable}} == true
#         run: |
#           cp README.md docs/Home.md
#           cp docs/SUMMARY.md docs/_Sidebar.md
#       - run: if [ ${{env.gpg_Enable}} == false ]; then echo ::set-env name=commitName::"Changlog User" ; echo ::set-env name=commitEmail::"" ; else echo ::set-env name=commitName::${{ steps.import_gpg.outputs.name }} ; echo ::set-env name=commitEmail::${{ steps.import_gpg.outputs.email }} ; fi
#       - name: Commit files
#         id: commit
#         if: ${{env.changelog}} == true
#         uses: stefanzweifel/git-auto-commit-action@v4
#         with:
#           commit_message: 'docs: update changelog'
#           branch: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release
#           commit_user_name: ${{env.commitName}}
#           commit_user_email: ${{env.commitEmail}}
#           commit_author: '${{env.commitName}} <${{env.commitEmail}}>'
#           commit_options: ${{env.CommitOptions}}
#           push_options: ${{env.auto_pushOptions}}
#       - name: Sync docs to wiki
#         if: ${{env.wiki_enabled}} == true && ${{env.wiki_docsToWiki}} == true
#         uses: newrelic/wiki-sync-action@master
#         with:
#           source: ${{env.wiki_docsToWikiSource}}
#           destination: ${{env.wiki_docsToWikiDestination}}
#           token: ${{ secrets.BOT_TOKEN }}
#       - run: echo ::set-env name=repository_name::$(echo "${{github.repository}}" | awk -F / '{print $2}')
#       - name: Copy to ${{github.repository}}
#         if: ${{env.wiki_enabled}} == true && ${{env.wiki_docsToRepo}} == true
#         uses: andstor/copycat-action@v3
#         with:
#           personal_token: ${{ secrets.BOT_TOKEN }}
#           src_path: ${{env.wiki_docsToRepoSource}}
#           dst_path: ${{env.wiki_docsToRepoDestination}}
#           dst_owner: ${{github.repository_owner}}
#           dst_repo_name: ${{env.repository_name}}${{env.wiki_docsToRepoSuffix}}
#           commit_message: 'docs: auto update'
#         continue-on-error: true

#   pullordelete:
#     name: delete or pull
#     runs-on: ubuntu-latest
#     needs:
#       - createBranch
#       - update_release_draft
#       - create-changelog
#     steps:
#       - name: Get Configurations
#         uses: Videndum/manage-github-secrets@1.0.0-beta
#         with:
#           settings: ${{ secrets.SETTINGS }}
#           mode: 'environment'
#           token: ${{ secrets.GITHUB_TOKEN }}
#       - name: pull-request
#         uses: repo-sync/pull-request@v2
#         with:
#           github_token: ${{ secrets.BOT_TOKEN }}
#           source_branch: ${{env.auto_branchPrefix}}${{env.auto_branch}}_release
#           destination_branch: ${{env.auto_destination}}
#           pr_title: 'chore: automatic updates from release workflow'
#           pr_body: ${{env.auto_body}}
#           pr_label: ${{env.auto_labels}}
